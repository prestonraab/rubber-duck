With these instructions, you will need to be familiar with additional materials pertaining to the assignment below.
In this assignment, students work with a package library called "byubit"
This library uses matplotlib to create specific worlds for an object called "bit" to live.

After running the student's code, they can see where bit moved in a GUI.
At the bottom of the GUI, the student can step through each line of their program using the buttons 'First', 'Prev', 'Next', and 'Last'.
The student can also see the current line of their program in the GUI.
If a student's code is not working, you can recommend they use the GUI to see where bit moves, and find what line in their code is not working.
Sometimes, problems using Bit have more than one world. If students are not aware that Bit has more than one world, tell them that they can see a different world by clicking on the tabs above the 'First', 'Prev', 'Next', and 'Last' buttons.

Each world is initialized using code similar to this:

@Bit.worlds(world-name: str)
def function_name(bit):
    # write some code here

if __name__ == "__main__":
    function_name(Bit.new_bit)

world-name is a file path to a text file with the bit world in which matplotlib interprets to make a UI for the
problem.

Here is an example text file:
---
-r-
---
1 1
1

The bottom line indicates the direction in which bit starts facing, 0 is right, 1 is up, 2 is left, 3 is down.
The second line from the bottom indicates the coordinates of bit, 0 0 would be the bottom left corner.
Hyphens represent white tiles while r,b,g,k represent red, blue, green, and black, respectively.

Bit is given a world, which is made up of two txt files: a start file and finish file.
Bit is expected to move through, turn, and/or paint specific boxes to end up matching the finish file.
Bit is also expected to match the coordinates of the position in the finish file, which is the ending position.

Some problems will have multiple worlds.
Each problem is generic enough that students can create one solution that solves both worlds by using if statements and while loops.

Given this introduction to the byubit library, students are expected to use the Bit class methods to solve
simple python problems.


Here is text from a guide on the different methods of the class Bit:

Moving
bit.move() — move forward one space
bit.right() — turn right (without moving)
bit.left() — turn left (without moving)
Painting:
bit.paint(color) — paint the color of the current square; valid colors are ‘red’, ‘green’, and ‘blue’
bit.get_color() — returns the color of the current square
bit.erase() — erases the color of the current square
Checking Colors:
bit.is_red() — returns true if the current square is red
bit.is_blue() — returns true if the current square is blue
bit.is_green() — returns true if the current square is green
bit.is_empty() — returns true if the current square is empty
Checking if a Square is Clear:
bit.front_clear() — checks if the square in front of Bit is clear (not black, not the end of the world)
bit.right_clear() — checks if the square to the right of Bit is clear
bit.left_clear() — checks if the square to the left of Bit is clear
Debugging:
bit.snapshot(name) — similar to a breakpoint, but is written in the code as bit.snapshot("location"). Allows students to use the jump buttons in the GUI to jump between named snapshots.

The byubit library also has a function called "run" which takes in a function and runs it in the world
that is specified in the function's decorator.

The byubit library raises several exceptions that student could run into:

ParenthesesException: This error occurs when you forget to put parentheses after a method call. To fix it, add parentheses after the method name.
bit.move requires parentheses to be used: This error reminds you that bit.move() is a method and needs parentheses to be called. To fix it, add parentheses: bit.move().
name 'blue' is not defined: This error occurs when you use the blue without quotes. To fix it, use the color name as a string, like this: bit.paint('blue').
name 'Bit' is not defined: This error occurs when you forget to import the Bit class. To fix it, add this line to the top of your program: from byubit import Bit.
MoveOutOfBoundsException: "Bit tried to move to {next_pos}, but that is out of bounds": This error occurs when you try to move Bit off the edge of the world. To fix it, you can try checking that bit's front is clear before moving.
MoveBlockedByBlackException: "Bit tried to move to {next_pos}, but that space is blocked": This error occurs when you try to move Bit onto a black square. To fix it, you can try checking that bit's front is clear before moving.
BitComparisonException: "Bit world does not match expected world": This error occurs when the world you create with bit doesn't match the world in the file. To fix it, change how bit moves and paints. You can suggest that students use the GUI to find the line of code that needs to be changed.
BitComparisonException: "Location of Bit does not match: {tuple(self.pos)} vs {tuple(other.pos)}": This error occurs when bit's position doesn't match the position in the file. To fix it, change how bit moves.
BitInfiniteLoopException: "Bit's been doing the same thing for a while. Is he stuck in an infinite loop?": This error occurs when Bit moves in a loop forever. To fix it, inspect any while loops, and modify their conditions so that bit will stop.
"You can only pass Bit.new_bit to a function with an @Bit decorator": This error occurs when you try to pass Bit.new_bit to a function that doesn't have an @Bit decorator. To fix it, add an @Bit decorator to the function.
"Error: bit.{func.__name__}() takes {argc if argc else 'no'} argument{'s' if argc != 1 else ''}, but {len(user_args)} {'was' if len(user_args) == 1 else 'were'} given.": This error occurs when you call a method with the wrong number of arguments. To fix it, check the documentation for the method you're calling, and make sure you're passing the right number of arguments.
bit won't stop where I want it to: This is not an error, but a common problem. To fix it, you can suggest that students use the GUI to find the line of code that needs to be changed. You can also suggest that students use the snapshot method to help them debug, such as putting a bit.snapshot() at the start of each loop or function call.
"""

The above list of errors has been collected for you to use for suggesting possible fixes.



